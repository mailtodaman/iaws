let hotInstance = null;
let selectedData = [];
function createHandsontable(data) {
    data = JSON.parse(data);
    document.getElementById("customQueryForm").classList.remove("d-none");
  
    // Add this line to hide the cloudServicesNav at the same time
    document.getElementById("cloudServicesNav").classList.add("d-none");    
    var container = document.getElementById('hot');
    // Clear the container
    container.innerHTML = '';
        // If an instance already exists, destroy it before creating a new one
    if (hotInstance) {
        hotInstance.destroy();
       
    }

   const contextMenuConfiguration = {
     
            callback(key, selection, clickEvent) {
            // Common callback for all options
            console.log(key, selection, clickEvent);
            },
            
            items: {
               
                sp1: '---------', // Separator
                terraform: {
                    name: 'Terraform Import',
                    disabled: function() {
                        // Assuming you want to check if 'arn' is among the column headers
                        const colHeaders = this.getColHeader();
                        return !colHeaders.includes('arn');
                    },
                    callback: function(key, selection, clickEvent) {
                        let selectedData = [];
                        if (!selection || selection.length === 0) {
                            console.log("No rows selected");
                            return;
                        }
    
                        const selectedRanges = this.getSelected() || [];
                        selectedRanges.forEach(range => {
                            const [startRow, , endRow, ] = range;
                            for (let row = startRow; row <= endRow; row++) {
                                const rowData = this.getSourceDataAtRow(row);
                                selectedData.push(rowData);
                            }
                        });
    
                        console.log("Selected Rows Data:", selectedData);
                        // Replace with a valid URL or handle URL generation accordingly
                       
                        // URL for the terraform import process, dynamically generated by the Django template system
                            var terraformImportProcessUrl = "/terraform_import_process/";

                            // Preparing the data object for clarity
                            var dataForTerraformImport = {
                            "selected_data_for_terraform_import": selectedData
                            };

                            // Calling postDataToGetFile with parameters on separate lines for better readability
                            postDataToGetFile(
                            terraformImportProcessUrl, 
                            JSON.stringify(dataForTerraformImport), 
                            'post'
                            );
                    
                    }
                },
                actions:{
                    name: 'Actions',
                    submenu: {   
                        items: submenuItems.map(item => ({
                            key: item.key,
                            name: item.name,
                            callback: function(key,options) {              
                                console.log('item name',  item.name);
                                console.log('item------Key', item.key);
                                console.log('item------table', item.tableName);    
                                // console.log('Selected range data:', convertSelectedDataToJSON(selectedData));
                                var storeHeadingPathDataUrl = "/store_heading_path_data/";
                                postData(storeHeadingPathDataUrl, { "table_path":item.tableName ,"form_heading": item.name , "row_data": convertSelectedDataToJSON(selectedData)  } , 'post');
                            }
                        }))
                    }
                },
              

            }

            




         
   };

    hotInstance = new Handsontable(container, {
        data: data, // Use the passed JSON data for the table
        rowHeaders: true,
        colHeaders: Object.keys(data[0]), // Set column headers based on JSON keys
        filters: true,
        dropdownMenu: true,
        stretchH: 'all',
        autoColumnSize: true,
        readOnly: true,
        manualColumnResize: true,
        manualRowResize: true,
        manualColumnFreeze: true,
        columnSorting: true,
        persistentState: true,
        contextMenu: contextMenuConfiguration,
        afterSelectionEnd: function (rowStart, columnStart, rowEnd, columnEnd) {
            // Initialize selectedData
            selectedData = [];
            // Retrieve column headers as keys
            let keys = this.getColHeader();
        
            if (rowStart === rowEnd) {
                // Single row selected
                const rowData = keys.map(key => this.getDataAtCell(rowStart, keys.indexOf(key)));
                selectedData.push(keys); // Add headers as the first row
                selectedData.push(rowData); // Add data row
            } else {
                // Multiple rows selected
                selectedData.push(keys); // Add headers as the first row
        
                for (let row = Math.min(rowStart, rowEnd); row <= Math.max(rowStart, rowEnd); row++) {
                    const rowData = keys.map(key => this.getDataAtCell(row, keys.indexOf(key)));
                    selectedData.push(rowData); // Add data rows
                }
            }
        
            console.log("selected data",selectedData)
            // You can perform any desired actions with the data here
        },
        
        hiddenRows: true,
        // minSpareRows: 1,
        // height: 'auto',
        // width: 'auto',
       
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });
    }

    